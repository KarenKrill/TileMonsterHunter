name: BuildWorkflow

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
  workflow_dispatch: # to run manually

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  WindowsBasedBuild:
    if: false
    name: ${{ matrix.targetPlatform }} build (${{ matrix.unityVersion }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 6000.0.47f1
        targetPlatform:
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set environment variables
        run: |
          echo HEAD_COMMIT_SHA=$(git rev-parse HEAD) >> $env:GITHUB_ENV
          $PROJECT_NAME_TEMP="${{ github.repository }}".Split('/')[-1]
          echo PROJECT_NAME=$PROJECT_NAME_TEMP >> $env:GITHUB_ENV
      - name: Print environment variables
        run: |
          echo HEAD_COMMIT_SHA=${{ env.HEAD_COMMIT_SHA }}
          echo PROJECT_NAME=${{ env.PROJECT_NAME }}
      - name: Restore Library directory from cache
        uses: actions/cache@v4
        with:
          path: Library
          key:
            Library-${{ runner.os }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ runner.os }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}-
            Library-${{ runner.os }}-${{ matrix.unityVersion }}-
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.PROJECT_NAME }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}.${{ matrix.targetPlatform }}.${{ matrix.unityVersion }}.Build
          path: build/${{ matrix.targetPlatform }}

  LinuxBasedBuild:
    if: false
    name: ${{ matrix.targetPlatform }} build (${{ matrix.unityVersion }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 6000.0.47f1
        targetPlatform:
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - Android # Build an Android player.
          - WebGL # WebGL.
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - name: Set environment variables
        run: |
          echo HEAD_COMMIT_SHA=$(git rev-parse HEAD) >> $GITHUB_ENV
          echo PROJECT_NAME=${GITHUB_REPOSITORY#*/} >> $GITHUB_ENV
      - name: Print environment variables
        run: |
          echo HEAD_COMMIT_SHA=${{ env.HEAD_COMMIT_SHA }}
          echo PROJECT_NAME=${{ env.PROJECT_NAME }}
      - name: Restore Library directory from cache
        uses: actions/cache@v4
        with:
          path: Library
          key:
            Library-${{ runner.os }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ runner.os }}-${{ matrix.unityVersion }}-${{ matrix.targetPlatform }}-
            Library-${{ runner.os }}-${{ matrix.unityVersion }}-
      - name: Free disk space for Android/WebGL build
        if: matrix.targetPlatform == 'Android' || matrix.targetPlatform == 'WebGL'
        uses: jlumbroso/free-disk-space@v1.3.1
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          buildName: ${{ env.PROJECT_NAME }}
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}.${{ matrix.targetPlatform }}.${{ matrix.unityVersion }}.Build
          path: build/${{ matrix.targetPlatform }}